// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filedag-project/filedag-storage/dag/node/datanode (interfaces: DataNodeClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/filedag-project/filedag-storage/dag/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDataNodeClient is a mock of DataNodeClient interface.
type MockDataNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataNodeClientMockRecorder
}

// MockDataNodeClientMockRecorder is the mock recorder for MockDataNodeClient.
type MockDataNodeClientMockRecorder struct {
	mock *MockDataNodeClient
}

// NewMockDataNodeClient creates a new mock instance.
func NewMockDataNodeClient(ctrl *gomock.Controller) *MockDataNodeClient {
	mock := &MockDataNodeClient{ctrl: ctrl}
	mock.recorder = &MockDataNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataNodeClient) EXPECT() *MockDataNodeClientMockRecorder {
	return m.recorder
}

// AllKeysChan mocks base method.
func (m *MockDataNodeClient) AllKeysChan(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (proto.DataNode_AllKeysChanClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllKeysChan", varargs...)
	ret0, _ := ret[0].(proto.DataNode_AllKeysChanClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllKeysChan indicates an expected call of AllKeysChan.
func (mr *MockDataNodeClientMockRecorder) AllKeysChan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllKeysChan", reflect.TypeOf((*MockDataNodeClient)(nil).AllKeysChan), varargs...)
}

// Delete mocks base method.
func (m *MockDataNodeClient) Delete(arg0 context.Context, arg1 *proto.DeleteRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDataNodeClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataNodeClient)(nil).Delete), varargs...)
}

// DeleteMany mocks base method.
func (m *MockDataNodeClient) DeleteMany(arg0 context.Context, arg1 *proto.DeleteManyRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMany", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockDataNodeClientMockRecorder) DeleteMany(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockDataNodeClient)(nil).DeleteMany), varargs...)
}

// Get mocks base method.
func (m *MockDataNodeClient) Get(arg0 context.Context, arg1 *proto.GetRequest, arg2 ...grpc.CallOption) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataNodeClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataNodeClient)(nil).Get), varargs...)
}

// GetMeta mocks base method.
func (m *MockDataNodeClient) GetMeta(arg0 context.Context, arg1 *proto.GetMetaRequest, arg2 ...grpc.CallOption) (*proto.GetMetaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeta", varargs...)
	ret0, _ := ret[0].(*proto.GetMetaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockDataNodeClientMockRecorder) GetMeta(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockDataNodeClient)(nil).GetMeta), varargs...)
}

// Put mocks base method.
func (m *MockDataNodeClient) Put(arg0 context.Context, arg1 *proto.AddRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockDataNodeClientMockRecorder) Put(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDataNodeClient)(nil).Put), varargs...)
}

// Size mocks base method.
func (m *MockDataNodeClient) Size(arg0 context.Context, arg1 *proto.SizeRequest, arg2 ...grpc.CallOption) (*proto.SizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Size", varargs...)
	ret0, _ := ret[0].(*proto.SizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockDataNodeClientMockRecorder) Size(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDataNodeClient)(nil).Size), varargs...)
}
